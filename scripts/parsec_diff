diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000..228b9a10
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+**/obj/**
+**/run/**
+*.log
+**/inst/**
diff --git a/config/gcc-tsan.bldconf b/config/gcc-tsan.bldconf
new file mode 100644
index 00000000..73bb503b
--- /dev/null
+++ b/config/gcc-tsan.bldconf
@@ -0,0 +1,124 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing global information necessary to build
+#               PARSEC with gcc
+#
+# Copyright (C) 2006-2009 Princeton University
+# Written by Christian Bienia (Initial version)
+#            Christian Fensch (Sparc/Solaris port)
+
+# Compilation and linking options
+# These are the global options we'll use to build the benchmark suite. Each
+# package also has a local build configuration file defining the exact
+# arguments and environment to use.
+
+
+# Determine OS-specific paths and prefixes
+# We first determine the various directories typically used for the GNU
+# binaries, then we use that information to define the binary locations.
+# The values for Linux are at the end and also the default values.
+
+case "${OSTYPE}" in
+*solaris*)
+  # Solaris case
+
+  # Solaris-specific variables
+  # SFW_HOME is installation root of SFW (Solaris FreeWare)
+  export SFW_HOME="/usr/sfw"
+
+  # CC_HOME is installation root of the C compiler
+  export CC_HOME="/usr/local/gcc-4.2.4"
+  #export CC_HOME="/usr/sfw"
+  # BINUTIL_HOME is installation root of the GNU binutils
+  export BINUTIL_HOME="/usr/sfw"
+  # GNUTOOL_HOME is installation root of the GNU tools
+  export GNUTOOL_HOME="${SFW_HOME}"
+  # BINARY_PREFIX is the string which is used as prefix for the GNU binaries
+  export BINARY_PREFIX="g"
+;;
+*)
+  # Linux + default case
+
+  # CC_HOME is installation root of the C compiler
+  export CC_HOME="/usr"
+  # BINUTIL_HOME is installation root of the GNU binutils
+  export BINUTIL_HOME="/usr"
+  # GNUTOOL_HOME is installation root of the GNU tools
+  export GNUTOOL_HOME="/usr"
+  # BINARY_PREFIX is the string which is used as prefix for the GNU binaries
+  export BINARY_PREFIX=""
+;;
+esac
+
+# Compilers and preprocessors
+export CC="${CC_HOME}/bin/gcc"
+export CXX="${CC_HOME}/bin/g++"
+export CPP="${CC_HOME}/bin/cpp"
+export CXXCPP=""
+
+# GNU Binutils
+export LD="${BINUTIL_HOME}/bin/${BINARY_PREFIX}ld"
+export AS="${BINUTIL_HOME}/bin/${BINARY_PREFIX}as"
+export AR="${BINUTIL_HOME}/bin/${BINARY_PREFIX}ar"
+export RANLIB="${BINUTIL_HOME}/bin/${BINARY_PREFIX}ranlib"
+export STRIP="${BINUTIL_HOME}/bin/${BINARY_PREFIX}strip"
+
+# GNU Tools
+export M4="${GNUTOOL_HOME}/bin/${BINARY_PREFIX}m4"
+export MAKE="${GNUTOOL_HOME}/bin/${BINARY_PREFIX}make"
+
+# Flags for increased portability of binaries
+PORTABILITY_FLAGS="-static-libgcc -Wl,--hash-style=both,--as-needed"
+
+# Arguments to use
+export CFLAGS=" -fsanitize=thread -O3 -g -funroll-loops -fprefetch-loop-arrays ${PORTABILITY_FLAGS}"
+export CXXFLAGS=" -fsanitize=thread -std=gnu++98 -O3 -g -funroll-loops -fprefetch-loop-arrays -fpermissive -fno-exceptions ${PORTABILITY_FLAGS}"
+export CPPFLAGS="-fsanitize=thread "
+export CXXCPPFLAGS="-fsanitize=thread "
+export LDFLAGS="-fsanitize=thread -L${CC_HOME}/lib64 -L${CC_HOME}/lib"
+export LIBS=""
+export EXTRA_LIBS=""
+export PARMACS_MACRO_FILE="pthreads"
+
+
+# OS-specific arguments
+case "${OSTYPE}" in
+*solaris*)
+  CFLAGS="${CFLAGS} -I${SFW_HOME}/include"
+  CXXFLAGS="${CXXFLAGS} -I${SFW_HOME}/include"
+  LDFLAGS="${LDFLAGS} -L${SFW_HOME}/lib"
+  ;;
+esac
+
+# Add PARSEC version to compiler flags
+if [ -f "${PARSECDIR}/version" ]; then
+  CFLAGS="${CFLAGS} -DPARSEC_VERSION=$(${CAT} ${PARSECDIR}/version)"
+  CXXFLAGS="${CXXFLAGS} -DPARSEC_VERSION=$(${CAT} ${PARSECDIR}/version)"
+fi
+
+# Java
+export JAVA_HOME="/usr"
+export JAVAC="${JAVA_HOME}/bin/javac"
+
+# Version numbers
+if [ -x ${CC} ]; then
+  CC_ver=$(${CC} --version)
+else
+  CC_ver=""
+fi
+if [ -x ${CXX} ]; then
+  CXX_ver=$(${CXX} --version)
+else
+  CXX_ver=""
+fi
+if [ -x ${LD} ]; then
+  LD_ver=$(${LD} --version)
+else
+  LD_ver=""
+fi
+if [ -x ${JAVAC} ]; then
+  JAVAC_ver=$(${JAVAC} -version 2>&1)
+else
+  JAVAC_ver=""
+fi
+
diff --git a/config/gcc.bldconf b/config/gcc.bldconf
index 144f6231..0aa7793f 100644
--- a/config/gcc.bldconf
+++ b/config/gcc.bldconf
@@ -72,7 +72,7 @@ PORTABILITY_FLAGS="-static-libgcc -Wl,--hash-style=both,--as-needed"
 
 # Arguments to use
 export CFLAGS=" -O3 -g -funroll-loops -fprefetch-loop-arrays ${PORTABILITY_FLAGS}"
-export CXXFLAGS="-O3 -g -funroll-loops -fprefetch-loop-arrays -fpermissive -fno-exceptions ${PORTABILITY_FLAGS}"
+export CXXFLAGS="-std=gnu++98 -O3 -g -funroll-loops -fprefetch-loop-arrays -fpermissive -fno-exceptions ${PORTABILITY_FLAGS}"
 export CPPFLAGS=""
 export CXXCPPFLAGS=""
 export LDFLAGS="-L${CC_HOME}/lib64 -L${CC_HOME}/lib"
diff --git a/pkgs/apps/blackscholes/parsec/gcc-tsan.bldconf b/pkgs/apps/blackscholes/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..a3fd0e56
--- /dev/null
+++ b/pkgs/apps/blackscholes/parsec/gcc-tsan.bldconf
@@ -0,0 +1,6 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/blackscholes/parsec/gcc-pthreads.bldconf
diff --git a/pkgs/apps/bodytrack/parsec/gcc-tsan.bldconf b/pkgs/apps/bodytrack/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..4cf42bcc
--- /dev/null
+++ b/pkgs/apps/bodytrack/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/bodytrack/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/apps/facesim/parsec/gcc-tsan.bldconf b/pkgs/apps/facesim/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..db5f6036
--- /dev/null
+++ b/pkgs/apps/facesim/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/facesim/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/apps/ferret/parsec/gcc-tsan.bldconf b/pkgs/apps/ferret/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..87b7ef15
--- /dev/null
+++ b/pkgs/apps/ferret/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/ferret/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c b/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
index 06b3d9c5..04814d3e 100644
--- a/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
+++ b/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
@@ -387,7 +387,7 @@ void *t_out (void *dummy)
 		ARRAY_BEGIN_FOREACH(rank->result.u.list, cass_list_entry_t p)
 		{
 			char *obj = NULL;
-			if (p.dist == HUGE) continue;
+			if (p.dist == HUGE_VAL) continue;
 			cass_map_id_to_dataobj(query_table->map, p.id, &obj);
 			assert(obj != NULL);
 			fprintf(fout, "\t%s:%g", obj, p.dist);
diff --git a/pkgs/apps/ferret/src/benchmark/ferret-serial.c b/pkgs/apps/ferret/src/benchmark/ferret-serial.c
index 7263418c..fbb7d21e 100644
--- a/pkgs/apps/ferret/src/benchmark/ferret-serial.c
+++ b/pkgs/apps/ferret/src/benchmark/ferret-serial.c
@@ -220,7 +220,7 @@ void do_query (const char *name)
 	ARRAY_BEGIN_FOREACH(result.u.list, cass_list_entry_t p)
 	{
 		char *obj = NULL;
-		if (p.dist == HUGE) continue;
+		if (p.dist == HUGE_VAL) continue;
 		cass_map_id_to_dataobj(query_table->map, p.id, &obj);
 		assert(obj != NULL);
 		fprintf(fout, "\t%s:%g", obj, p.dist);
diff --git a/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp b/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp
index 4f3c4cb9..9b8926d7 100644
--- a/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp
+++ b/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp
@@ -404,7 +404,7 @@ void *filter_out::operator()(void* item) {
 	ARRAY_BEGIN_FOREACH(data->first.rank.result.u.list, cass_list_entry_t p)
 	{
 		char *obj = NULL;
-		if (p.dist == HUGE) continue;
+		if (p.dist == HUGE_VAL) continue;
 		cass_map_id_to_dataobj(query_table->map, p.id, &obj);
 		assert(obj != NULL);
 		fprintf(fout, "\t%s:%g", obj, p.dist);
diff --git a/pkgs/apps/ferret/src/src/lsh/LSH_query.c b/pkgs/apps/ferret/src/src/lsh/LSH_query.c
index f2694031..9bb8aeaa 100644
--- a/pkgs/apps/ferret/src/src/lsh/LSH_query.c
+++ b/pkgs/apps/ferret/src/src/lsh/LSH_query.c
@@ -197,7 +197,7 @@ static void LSH_query_local (LSH_query_t *query)
 	sx = sy = sxx = sxy = 0.0;
 	for (j = 0; j < K-1; j++)
 	{
-		if (query->topk[K - j - 2].dist >= HUGE) break;
+		if (query->topk[K - j - 2].dist >= HUGE_VAL) break;
 		lk = log(j+1); 
 		ld = log(query->topk[K - j - 2].dist);
 		sx += lk;
@@ -243,7 +243,7 @@ static void LSH_query_bootstrap (LSH_query_t *query, const float *point)
 	for (i = 0; i < L; i++)
 	{
 		memset(_topk[i], 0xff, sizeof (*_topk[i]) * K);
-		TOPK_INIT(_topk[i], dist, K, HUGE);
+		TOPK_INIT(_topk[i], dist, K, HUGE_VAL);
 		ARRAY_BEGIN_FOREACH(lsh->hash[i].bucket[tmp2[i]], uint32_t id) {
 			if (!bitmap_contain(query->bitmap, id))
 			{
@@ -358,7 +358,7 @@ void LSH_query_merge (LSH_query_t *query)
 	int i, j;
 
 	memset(topk, 0xff, sizeof (*topk) * K);
-	TOPK_INIT(topk, dist, K, HUGE);
+	TOPK_INIT(topk, dist, K, HUGE_VAL);
 
 //	query->CC = 0;
 
diff --git a/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c b/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c
index d6641c6d..69475b2c 100644
--- a/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c
+++ b/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c
@@ -139,7 +139,7 @@ void LSH_query_batch (const LSH_query_t *query, int N, const float **point, cass
 		}
 		LSH_hash2_noperturb(lsh, tmp, tmp2, L);
 
-		TOPK_INIT(topk[i], dist, K, HUGE);
+		TOPK_INIT(topk[i], dist, K, HUGE_VAL);
 		for (j = 0; j < L; j++)
 		{
 			int k;
@@ -320,9 +320,9 @@ void LSH_query_batch_ca (const LSH_query_t *query, int N, const float **point, c
 	for (i = 0; i < N; i++)
 	{
 		int j;
-		TOPK_INIT(topk[i], dist, K, HUGE);
+		TOPK_INIT(topk[i], dist, K, HUGE_VAL);
 		for (j = 0; j < T; j++)
-			TOPK_INIT(ptopk[i][j], dist, K, HUGE);
+			TOPK_INIT(ptopk[i][j], dist, K, HUGE_VAL);
 	}
 
 	//stimer_tuck(&tmr, "Stage-2");
diff --git a/pkgs/apps/fluidanimate/parsec/gcc-tsan.bldconf b/pkgs/apps/fluidanimate/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..106de56c
--- /dev/null
+++ b/pkgs/apps/fluidanimate/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization model is pthreads
+source ${PARSECDIR}/pkgs/apps/fluidanimate/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/apps/freqmine/parsec/gcc-tsan.bldconf b/pkgs/apps/freqmine/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..37240d25
--- /dev/null
+++ b/pkgs/apps/freqmine/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is openmp
+source ${PARSECDIR}/pkgs/apps/freqmine/parsec/gcc-openmp.bldconf
+
diff --git a/pkgs/apps/raytrace/parsec/gcc-tsan.bldconf b/pkgs/apps/raytrace/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..9221bc8e
--- /dev/null
+++ b/pkgs/apps/raytrace/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/raytrace/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/apps/raytrace/src/RTTL/test/TestRTVec/TestRTVec.cxx b/pkgs/apps/raytrace/src/RTTL/test/TestRTVec/TestRTVec.cxx
index 638db26e..aa3e115b 100644
--- a/pkgs/apps/raytrace/src/RTTL/test/TestRTVec/TestRTVec.cxx
+++ b/pkgs/apps/raytrace/src/RTTL/test/TestRTVec/TestRTVec.cxx
@@ -117,11 +117,6 @@ int pow(int a, int n) {
     for (int i = 1; i < n; i++) r *= a;
     return r;
 }
-#if defined(__GNUC__) || defined(__INTEL_COMPILER)
-int pow(double a, int n) {
-    return pow(a, (double)n);
-}
-#endif
 
 template<int N, typename DataType>
 void testbox() {
@@ -140,7 +135,7 @@ void testbox() {
     DataType dv = d.volume();
     d[1][0] = 20;
     rtvec v = d.sides();
-    if (v.minIndex() != 1 || dv != pow(convert<DataType>(11), N)) {
+    if (v.minIndex() != 1 || dv != std::pow(convert<DataType>(11), N)) {
         cout << "err302 = " << d << ";" << endl;
         //exit(302);
     }
diff --git a/pkgs/apps/swaptions/parsec/gcc-tsan.bldconf b/pkgs/apps/swaptions/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..c7d9c4ac
--- /dev/null
+++ b/pkgs/apps/swaptions/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/swaptions/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/apps/swaptions/parsec/gcc.bldconf b/pkgs/apps/swaptions/parsec/gcc.bldconf
index b76144db..c7d9c4ac 100644
--- a/pkgs/apps/swaptions/parsec/gcc.bldconf
+++ b/pkgs/apps/swaptions/parsec/gcc.bldconf
@@ -3,5 +3,5 @@
 # gcc.bldconf - configuration file for PARSEC
 
 # Default parallelization is pthreads
-source ${PARSECDIR}/pkgs/apps/swaptions/parsec/gcc-tbb.bldconf
+source ${PARSECDIR}/pkgs/apps/swaptions/parsec/gcc-pthreads.bldconf
 
diff --git a/pkgs/apps/vips/parsec/gcc-tsan.bldconf b/pkgs/apps/vips/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..3f2d56c2
--- /dev/null
+++ b/pkgs/apps/vips/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/vips/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/apps/x264/parsec/gcc-pthreads.bldconf b/pkgs/apps/x264/parsec/gcc-pthreads.bldconf
index 7bf67b0d..0ef90cc7 100644
--- a/pkgs/apps/x264/parsec/gcc-pthreads.bldconf
+++ b/pkgs/apps/x264/parsec/gcc-pthreads.bldconf
@@ -35,5 +35,5 @@ build_env="PATH=\"${PARSECDIR}/pkgs/tools/yasm/inst/${PARSECPLAT}/bin:${PATH}\""
 build_inplace="TRUE"
 
 # Arguments to pass to the configure script, if it exists
-build_conf="--enable-pthread --extra-asflags=\"${ASFLAGS}\" --extra-cflags=\"${CFLAGS}\" --extra-ldflags=\"${LDFLAGS} ${LIBS}\""
+build_conf="--enable-pthread --extra-asflags=\"${ASFLAGS}\" --disable-asm  --extra-cflags=\"${CFLAGS}\" --extra-ldflags=\"${LDFLAGS} ${LIBS}\""
 
diff --git a/pkgs/apps/x264/parsec/gcc-tsan.bldconf b/pkgs/apps/x264/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..23fee1c8
--- /dev/null
+++ b/pkgs/apps/x264/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/x264/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/kernels/canneal/parsec/gcc-tsan.bldconf b/pkgs/kernels/canneal/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..f3d4808c
--- /dev/null
+++ b/pkgs/kernels/canneal/parsec/gcc-tsan.bldconf
@@ -0,0 +1,6 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/kernels/canneal/parsec/gcc-pthreads.bldconf
diff --git a/pkgs/kernels/canneal/src/Makefile b/pkgs/kernels/canneal/src/Makefile
index ec35a6c3..45150d45 100644
--- a/pkgs/kernels/canneal/src/Makefile
+++ b/pkgs/kernels/canneal/src/Makefile
@@ -7,7 +7,7 @@ LIBS:=$(LIBS) -lm
 
 ifdef version
   ifeq "$(version)" "pthreads"
-    CXXFLAGS+=-DENABLE_THREADS -pthread
+    CXXFLAGS+=-DENABLE_THREADS -pthread -std=c++11
   endif
 endif
 
diff --git a/pkgs/kernels/dedup/parsec/gcc-tsan.bldconf b/pkgs/kernels/dedup/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..f3f4c778
--- /dev/null
+++ b/pkgs/kernels/dedup/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/kernels/dedup/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/kernels/streamcluster/parsec/gcc-tsan.bldconf b/pkgs/kernels/streamcluster/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..0d58ff4d
--- /dev/null
+++ b/pkgs/kernels/streamcluster/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization model is pthreads
+source ${PARSECDIR}/pkgs/kernels/streamcluster/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/libs/glib/parsec/gcc-tsan.bldconf b/pkgs/libs/glib/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..34a7a11f
--- /dev/null
+++ b/pkgs/libs/glib/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2007 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps="zlib"
+
+# Environment to use for configure script and Makefile
+build_env="CFLAGS=\"-I${PARSECDIR}/pkgs/libs/zlib/inst/${PARSECPLAT}/include ${CFLAGS}\" LDFLAGS=\"-L${PARSECDIR}/pkgs/libs/zlib/inst/${PARSECPLAT}/lib ${LDFLAGS}\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf="--disable-shared --enable-threads --with-threads=posix"
+
diff --git a/pkgs/libs/gsl/parsec/gcc-tsan.bldconf b/pkgs/libs/gsl/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..5f38c679
--- /dev/null
+++ b/pkgs/libs/gsl/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2007 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+# For some reason gsl doesn't add -lm to the link list
+build_env="LIBS=\"${LIBS} -lm\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf="--disable-shared"
diff --git a/pkgs/libs/hooks/parsec/gcc-tsan.bldconf b/pkgs/libs/hooks/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..b1259aee
--- /dev/null
+++ b/pkgs/libs/hooks/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2007-2009 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps="libtool"
+
+# Environment to use for configure script and Makefile
+build_env=""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="TRUE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
+
diff --git a/pkgs/libs/libjpeg/parsec/gcc-tsan.bldconf b/pkgs/libs/libjpeg/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..af0ce90d
--- /dev/null
+++ b/pkgs/libs/libjpeg/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2007 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+# For some reason gsl doesn't add -lm to the link list
+build_env=""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf="--disable-shared"
diff --git a/pkgs/libs/libxml2/parsec/gcc-tsan.bldconf b/pkgs/libs/libxml2/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..7c77d7be
--- /dev/null
+++ b/pkgs/libs/libxml2/parsec/gcc-tsan.bldconf
@@ -0,0 +1,29 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2007 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps="zlib"
+
+# Environment to use for configure script and Makefile
+build_env="CFLAGS=\"-I${PARSECDIR}/pkgs/libs/zlib/inst/${PARSECPLAT}/include ${CFLAGS}\" LDFLAGS=\"-ldl -L${PARSECDIR}/pkgs/libs/zlib/inst/${PARSECPLAT}/lib ${LDFLAGS}\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf="--disable-shared --with-threads"
diff --git a/pkgs/libs/mesa/parsec/gcc-tsan.bldconf b/pkgs/libs/mesa/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..ead8a7b7
--- /dev/null
+++ b/pkgs/libs/mesa/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2009 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env=""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="TRUE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf="--with-driver=xlib --enable-glut --enable-static --disable-shared"
+
diff --git a/pkgs/libs/parmacs/parsec/gcc-tsan.bldconf b/pkgs/libs/parmacs/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..9ad5b15e
--- /dev/null
+++ b/pkgs/libs/parmacs/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2007-2009 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env=""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="TRUE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
+
diff --git a/pkgs/libs/ssl/parsec/gcc-tsan.bldconf b/pkgs/libs/ssl/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..f4bb94cf
--- /dev/null
+++ b/pkgs/libs/ssl/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2009 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env="PATH=\"${CC_HOME}/bin:${PATH}\" CXXFLAGS=\"${CXXFLAGS/-fsanitize=thread/}\" CFLAGS=\"${CFLAGS/-fsanitize=thread/}\" LDFLAGS=\"${LDFLAGS/-fsanitize=thread/}\" CPPFLAGS=\"${CPPFLAGS/-fsanitize=thread/}\" CXXCPPFLAGS=\"${CXXCPPFLAGS/-fsanitize=thread/}\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="TRUE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf="threads no-zlib no-shared"
+
diff --git a/pkgs/libs/ssl/src/doc/apps/smime.pod b/pkgs/libs/ssl/src/doc/apps/smime.pod
index caf2d268..b3fdd88e 100644
--- a/pkgs/libs/ssl/src/doc/apps/smime.pod
+++ b/pkgs/libs/ssl/src/doc/apps/smime.pod
@@ -265,28 +265,28 @@ encrypted data is used for other purposes.
 
 =over 4
 
-=item 0
+=item C<0>
 
 the operation was completely successfully.
 
-=item 1 
+=item C<1> 
 
 an error occurred parsing the command options.
 
-=item 2
+=item C<2>
 
 one of the input files could not be read.
 
-=item 3
+=item C<3>
 
 an error occurred creating the PKCS#7 file or when reading the MIME
 message.
 
-=item 4
+=item C<4>
 
 an error occurred decrypting or verifying the message.
 
-=item 5
+=item C<5>
 
 the message was verified correctly but an error occurred writing out
 the signers certificates.
diff --git a/pkgs/libs/ssl/src/doc/crypto/rand.pod b/pkgs/libs/ssl/src/doc/crypto/rand.pod
index 1c068c85..844247d8 100644
--- a/pkgs/libs/ssl/src/doc/crypto/rand.pod
+++ b/pkgs/libs/ssl/src/doc/crypto/rand.pod
@@ -74,16 +74,16 @@ First up I will state the things I believe I need for a good RNG.
 
 =over 4
 
-=item 1
+=item C<1>
 
 A good hashing algorithm to mix things up and to convert the RNG 'state'
 to random numbers.
 
-=item 2
+=item C<2>
 
 An initial source of random 'state'.
 
-=item 3
+=item C<3>
 
 The state should be very large.  If the RNG is being used to generate
 4096 bit RSA keys, 2 2048 bit random strings are required (at a minimum).
@@ -93,13 +93,13 @@ carried away on this last point but it does indicate that it may not be
 a bad idea to keep quite a lot of RNG state.  It should be easier to
 break a cipher than guess the RNG seed data.
 
-=item 4
+=item C<4>
 
 Any RNG seed data should influence all subsequent random numbers
 generated.  This implies that any random seed data entered will have
 an influence on all subsequent random numbers generated.
 
-=item 5
+=item C<5>
 
 When using data to seed the RNG state, the data used should not be
 extractable from the RNG state.  I believe this should be a
@@ -108,12 +108,12 @@ data would be a private key or a password.  This data must
 not be disclosed by either subsequent random numbers or a
 'core' dump left by a program crash.
 
-=item 6
+=item C<6>
 
 Given the same initial 'state', 2 systems should deviate in their RNG state
 (and hence the random numbers generated) over time if at all possible.
 
-=item 7
+=item C<7>
 
 Given the random number output stream, it should not be possible to determine
 the RNG state or the next random number.
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_COMP_add_compression_method.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_COMP_add_compression_method.pod
index 42fa66b1..80175a3c 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_COMP_add_compression_method.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_COMP_add_compression_method.pod
@@ -53,11 +53,11 @@ SSL_COMP_add_compression_method() may return the following values:
 
 =over 4
 
-=item 0
+=item C<0>
 
 The operation succeeded.
 
-=item 1
+=item C<1>
 
 The operation failed. Check the error queue to find out the reason.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_add_session.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_add_session.pod
index 82676b26..fd927f8d 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_add_session.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_add_session.pod
@@ -52,13 +52,13 @@ The following values are returned by all functions:
 
 =over 4
 
-=item 0
+=item C<0>
 
  The operation failed. In case of the add operation, it was tried to add
  the same (identical) session twice. In case of the remove operation, the
  session was not found in the cache.
 
-=item 1
+=item C<1>
  
  The operation succeeded.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_load_verify_locations.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_load_verify_locations.pod
index 84a799fc..de010652 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_load_verify_locations.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_load_verify_locations.pod
@@ -100,13 +100,13 @@ The following return values can occur:
 
 =over 4
 
-=item 0
+=item C<0>
 
 The operation failed because B<CAfile> and B<CApath> are NULL or the
 processing at one of the locations specified failed. Check the error
 stack to find out the reason.
 
-=item 1
+=item C<1>
 
 The operation succeeded.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_client_CA_list.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_client_CA_list.pod
index 632b556d..04d0a3c9 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_client_CA_list.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_client_CA_list.pod
@@ -66,11 +66,11 @@ values:
 
 =over 4
 
-=item 1
+=item C<1>
 
 The operation succeeded.
 
-=item 0
+=item C<0>
 
 A failure while manipulating the STACK_OF(X509_NAME) object occurred or
 the X509_NAME could not be extracted from B<cacert>. Check the error stack
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_session_id_context.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_session_id_context.pod
index 58fc6855..ed0a81cd 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_session_id_context.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_session_id_context.pod
@@ -64,13 +64,13 @@ return the following values:
 
 =over 4
 
-=item 0
+=item C<0>
 
 The length B<sid_ctx_len> of the session id context B<sid_ctx> exceeded
 the maximum allowed length of B<SSL_MAX_SSL_SESSION_ID_LENGTH>. The error
 is logged to the error stack.
 
-=item 1
+=item C<1>
 
 The operation succeeded.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_ssl_version.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_ssl_version.pod
index 00201809..18c0970f 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_ssl_version.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_CTX_set_ssl_version.pod
@@ -42,11 +42,11 @@ and SSL_set_ssl_method():
 
 =over 4
 
-=item 0
+=item C<0>
 
 The new choice failed, check the error stack to find out the reason.
 
-=item 1
+=item C<1>
 
 The operation succeeded.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_accept.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_accept.pod
index cc724c0d..44dbee66 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_accept.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_accept.pod
@@ -44,12 +44,12 @@ The following return values can occur:
 
 =over 4
 
-=item 1
+=item C<1>
 
 The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been
 established.
 
-=item 0
+=item C<0>
 
 The TLS/SSL handshake was not successful but was shut down controlled and
 by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_clear.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_clear.pod
index 8e077e31..b05b142d 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_clear.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_clear.pod
@@ -50,12 +50,12 @@ The following return values can occur:
 
 =over 4
 
-=item 0
+=item C<0>
 
 The SSL_clear() operation could not be performed. Check the error stack to
 find out the reason.
 
-=item 1
+=item C<1>
 
 The SSL_clear() operation was successful.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_connect.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_connect.pod
index cc56ebb7..3257f718 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_connect.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_connect.pod
@@ -41,12 +41,12 @@ The following return values can occur:
 
 =over 4
 
-=item 1
+=item C<1>
 
 The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been
 established.
 
-=item 0
+=item C<0>
 
 The TLS/SSL handshake was not successful but was shut down controlled and
 by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_do_handshake.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_do_handshake.pod
index 24357645..a0afc27b 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_do_handshake.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_do_handshake.pod
@@ -45,12 +45,12 @@ The following return values can occur:
 
 =over 4
 
-=item 1
+=item C<1>
 
 The TLS/SSL handshake was successfully completed, a TLS/SSL connection has been
 established.
 
-=item 0
+=item C<0>
 
 The TLS/SSL handshake was not successful but was shut down controlled and
 by the specifications of the TLS/SSL protocol. Call SSL_get_error() with the
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_read.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_read.pod
index 7038cd2d..3982b814 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_read.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_read.pod
@@ -86,7 +86,7 @@ The following return values can occur:
 The read operation was successful; the return value is the number of
 bytes actually read from the TLS/SSL connection.
 
-=item 0
+=item C<0>
 
 The read operation was not successful. The reason may either be a clean
 shutdown due to a "close notify" alert sent by the peer (in which case
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_session_reused.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_session_reused.pod
index da7d0626..033d54c0 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_session_reused.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_session_reused.pod
@@ -27,11 +27,11 @@ The following return values can occur:
 
 =over 4
 
-=item 0
+=item C<0>
 
 A new session was negotiated.
 
-=item 1
+=item C<1>
 
 A session was reused.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_set_fd.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_set_fd.pod
index 70291128..59e1b2bb 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_set_fd.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_set_fd.pod
@@ -35,11 +35,11 @@ The following return values can occur:
 
 =over 4
 
-=item 0
+=item C<0>
 
 The operation failed. Check the error stack to find out why.
 
-=item 1
+=item C<1>
 
 The operation succeeded.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_set_session.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_set_session.pod
index 5f54714a..d35e6d3b 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_set_session.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_set_session.pod
@@ -37,11 +37,11 @@ The following return values can occur:
 
 =over 4
 
-=item 0
+=item C<0>
 
 The operation failed; check the error stack to find out the reason.
 
-=item 1
+=item C<1>
 
 The operation succeeded.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_set_shutdown.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_set_shutdown.pod
index 011a022a..91392114 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_set_shutdown.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_set_shutdown.pod
@@ -24,7 +24,7 @@ The shutdown state of an ssl connection is a bitmask of:
 
 =over 4
 
-=item 0
+=item C<0>
 
 No shutdown setting, yet.
 
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_shutdown.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_shutdown.pod
index 89911acb..f8638126 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_shutdown.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_shutdown.pod
@@ -92,12 +92,12 @@ The following return values can occur:
 
 =over 4
 
-=item 1
+=item C<1>
 
 The shutdown was successfully completed. The "close notify" alert was sent
 and the peer's "close notify" alert was received.
 
-=item 0
+=item C<0>
 
 The shutdown is not yet finished. Call SSL_shutdown() for a second time,
 if a bidirectional shutdown shall be performed.
diff --git a/pkgs/libs/ssl/src/doc/ssl/SSL_write.pod b/pkgs/libs/ssl/src/doc/ssl/SSL_write.pod
index e013c12d..30f9e2b4 100644
--- a/pkgs/libs/ssl/src/doc/ssl/SSL_write.pod
+++ b/pkgs/libs/ssl/src/doc/ssl/SSL_write.pod
@@ -79,7 +79,7 @@ The following return values can occur:
 The write operation was successful, the return value is the number of
 bytes actually written to the TLS/SSL connection.
 
-=item 0
+=item C<0>
 
 The write operation was not successful. Probably the underlying connection
 was closed. Call SSL_get_error() with the return value B<ret> to find out,
diff --git a/pkgs/libs/tbblib/parsec/gcc-tsan.bldconf b/pkgs/libs/tbblib/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..1a41795a
--- /dev/null
+++ b/pkgs/libs/tbblib/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2008 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env="compiler=gcc PATH=\"${CC_HOME}/bin:${PATH}\" CXXFLAGS=\"${CXXFLAGS} -fexceptions\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="TRUE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
+
diff --git a/pkgs/libs/uptcpip/parsec/gcc-tsan.bldconf b/pkgs/libs/uptcpip/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..4234310d
--- /dev/null
+++ b/pkgs/libs/uptcpip/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2008 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env=""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="TRUE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
+
diff --git a/pkgs/libs/zlib/parsec/gcc-tsan.bldconf b/pkgs/libs/zlib/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..67fbe4e2
--- /dev/null
+++ b/pkgs/libs/zlib/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2009 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env=""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="TRUE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
+
diff --git a/pkgs/netapps/netdedup/parsec/gcc-tsan.bldconf b/pkgs/netapps/netdedup/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..d8d4a088
--- /dev/null
+++ b/pkgs/netapps/netdedup/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/netapps/netdedup/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/netapps/netferret/parsec/gcc-tsan.bldconf b/pkgs/netapps/netferret/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..644dda63
--- /dev/null
+++ b/pkgs/netapps/netferret/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/netapps/netferret/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/netapps/netstreamcluster/parsec/gcc-tsan.bldconf b/pkgs/netapps/netstreamcluster/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..b94acda6
--- /dev/null
+++ b/pkgs/netapps/netstreamcluster/parsec/gcc-tsan.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization model is pthreads
+source ${PARSECDIR}/pkgs/netapps/netstreamcluster/parsec/gcc-pthreads.bldconf
+
diff --git a/pkgs/tools/cmake/parsec/gcc-tsan.bldconf b/pkgs/tools/cmake/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..44a7c405
--- /dev/null
+++ b/pkgs/tools/cmake/parsec/gcc-tsan.bldconf
@@ -0,0 +1,29 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2008 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env="CXXFLAGS=\"${CXXFLAGS/-fsanitize=thread/} -std=gnu++98 -fexceptions\" CFLAGS=\"${CFLAGS/-fsanitize=thread/}\" LDFLAGS=\"${LDFLAGS/-fsanitize=thread/}\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
diff --git a/pkgs/tools/cmake/parsec/gcc.bldconf b/pkgs/tools/cmake/parsec/gcc.bldconf
index 19984494..06c4d310 100644
--- a/pkgs/tools/cmake/parsec/gcc.bldconf
+++ b/pkgs/tools/cmake/parsec/gcc.bldconf
@@ -17,7 +17,7 @@
 build_deps=""
 
 # Environment to use for configure script and Makefile
-build_env="CXXFLAGS=\"${CXXFLAGS} -fexceptions\""
+build_env="CXXFLAGS=\"${CXXFLAGS} -std=gnu++98 -fexceptions\""
 
 # Whether the build system supports only in-place compilation.
 # If TRUE, then all sources will be copied to the build directory before we
diff --git a/pkgs/tools/libtool/parsec/gcc-tsan.bldconf b/pkgs/tools/libtool/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..5aab2b53
--- /dev/null
+++ b/pkgs/tools/libtool/parsec/gcc-tsan.bldconf
@@ -0,0 +1,31 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2009 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+# NOTE: We must remove `-lhooks' from the library list to avoid a circular dependency
+build_env="LIBS=\"\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
+
diff --git a/pkgs/tools/yasm/parsec/gcc-tsan.bldconf b/pkgs/tools/yasm/parsec/gcc-tsan.bldconf
new file mode 100644
index 00000000..d2a1b9aa
--- /dev/null
+++ b/pkgs/tools/yasm/parsec/gcc-tsan.bldconf
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# gcc.bldconf - file containing information necessary to build a specific
+#               program of the PARSEC benchmark suite with gcc
+#
+# Copyright (C) 2007 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+# yasm ignores LDFLAGS, add it to libs
+build_env="LIBS=\"${LDFLAGS} ${LIBS}\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf=""
